name: Check and/or Publish

on:
  pull_request:
    paths-ignore:
      - "**.md"

  push:
    branches:
      # latest release
      - main
      # maintenance releases
      - v[0-9]+.x.x
      - v[0-9]+.[0-9]+.x

env:
  CI: true
  HELM_CHART_BRANCH: gh-pages

jobs:
  pipeline:
    name: Checks and Build
    runs-on: ubuntu-latest
    outputs:
      tagged_release: ${{ steps.changesets-output.outputs.tagged_release }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Node
        uses: actions/setup-node@v3
        with:
          node-version-file: .nvmrc
          cache: yarn

      - name: Install Dependencies
        run: yarn install --frozen-lockfile --prefer-offline

      - name: Check for Uncommitted Changes
        run: |
          git diff --name-only --exit-code --relative || (echo "\nUncommitted changes found ðŸ‘†" && exit 1)

      - name: Detect File Changes
        id: changed-files
        uses: tj-actions/changed-files@v41
        with:
          files_yaml: |
            eslint_config:
              - .eslintrc.js
              - yarn.lock
            eslint_target:
              - '**/*.{ts,js,vue}'

      - name: Lint all files
        if: ${{ github.event_name == 'push' || steps.changed-files.outputs.eslint_config_any_changed == 'true' }}
        run: yarn lint .

      - name: Lint changed files
        if: ${{ steps.lint-all.outcome == 'skipped' && steps.changed-files.outputs.eslint_target_any_changed == 'true' }}
        run: yarn lint ${{ steps.changed-files.outputs.eslint_target_all_changed_files }} --no-error-on-unmatched-pattern

      - name: Build Observability Package
        run: yarn build-pkg observability

      - name: Determine Release Details
        id: release-details
        # prevents this step from running on forks AND only on pushes and .changeset.baseBranch is the target branch
        # TODO use StackVista instead of owanturist
        if: github.repository_owner == 'owanturist' && github.event_name == 'push'
        run: |
          BASE_BRANCH=$(jq -r '.baseBranch' .changeset/config.json)

          echo "Base branch: $BASE_BRANCH"

          if [[ "$BASE_BRANCH" == "${{ github.ref_name }}" ]]; then
            OUTPUT=$(mktemp ${{runner.temp}}/changeset-output.XXXXXX.json)

            if [ ! -f "$OUTPUT" ]; then
              echo "Failed to create temp file at: $OUTPUT"
              exit 1
            fi
            echo "Temporary file created at: $OUTPUT"

            # the status command uses path.join so the path should be relative
            yarn changeset status --output $(realpath --relative-to . $OUTPUT)

            if [ ! -s "$OUTPUT" ]; then
              echo "Error: Temporary file is empty after running 'yarn changeset status'"
              exit 1
            fi

            MESSAGE=$(jq -r 'if .releases | length > 0 then .releases[0] | "ðŸš€ Release `\(.name)@\(.oldVersion) â†’ \(.newVersion)`" else "Publishing release..." end' "$OUTPUT")

            echo "message=$MESSAGE" >> $GITHUB_OUTPUT
          fi

      # creates a PR if there are changesets or assign the new tag if the PR is merged
      - name: Create Release Pull Request or Publish
        id: changesets
        # run only if the release-details output is not empty
        if: steps.release-details.outputs.message
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: changesets/action@v1
        with:
          title: ${{ steps.release-details.outputs.message }}
          commit: ${{ steps.release-details.outputs.message }}
          # define the publish command, so changeset creates a release in GitHub
          publish: yarn release-tag

      - name: Extract Published Version
        id: changesets-output
        if: steps.changesets.outputs.published == 'true'
        run: |
          # Extract the first package name and version and format as `name-version`
          # ! The publish-pkgs script expects `name-version` but not `name@version` so `release-tag` creates both
          TAGGED_RELEASE=$(echo '${{ steps.changesets.outputs.publishedPackages }}' | jq -r '.[0] | "\(.name)-\(.version)"')
          echo "tagged_release=$TAGGED_RELEASE" >> $GITHUB_OUTPUT

      - name: Build and Publish Helm Packages
        if: steps.changesets-output.outputs.tagged_release
        run: |
          yarn publish-pkgs \
            -s "${{ github.repository }}" \
            -b "${{ env.HELM_CHART_BRANCH }}" \
            -t "${{ steps.changesets-output.outputs.tagged_release }}"

      - name: Upload Charts Artifact
        uses: actions/upload-artifact@v3
        with:
          name: charts
          path: tmp

      - name: Publish Helm Charts to GitHub Pages
        if: steps.changesets-output.outputs.tagged_release
        uses: ./.github/actions/publish
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tagged_release: "${{ steps.changesets-output.outputs.tagged_release }}"
          target_branch: "${{ env.HELM_CHART_BRANCH }}"

  release:
    name: Helm Release
    needs: pipeline
    if: needs.pipeline.outputs.tagged_release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Target Branch
        uses: actions/checkout@v4
        with:
          ref: "${{ env.HELM_CHART_BRANCH }}"

      - name: Set Up Helm CLI
        uses: azure/setup-helm@v3
        with:
          version: v3.8.0

      - name: Download Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: charts

      - name: Commit and Push Changes
        run: |
          git add ./{assets,charts,extensions,index.yaml}
          git commit -m "CI: Publish Helm charts for ${{ needs.pipeline.outputs.tagged_release }}"
          git push

      - name: Run Helm Chart Releaser
        uses: helm/chart-releaser-action@v1.4.1
        with:
          charts_dir: ./charts/*
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          CR_SKIP_EXISTING: true
