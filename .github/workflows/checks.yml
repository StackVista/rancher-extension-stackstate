name: Checks

on:
  pull_request:
    paths-ignore:
      - "**.md"

  push:
    branches:
      # latest release
      - main
      # maintenance releases
      - v[0-9]+.x.x
      - v[0-9]+.[0-9]+.x

env:
  CI: true

jobs:
  pipeline:
    name: Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Node
        uses: actions/setup-node@v3
        with:
          node-version-file: .nvmrc
          cache: yarn

      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline

      - name: Check for uncommitted changes
        run: |
          git diff --name-only --exit-code --relative || (echo "\nUncommitted changes found up there ðŸ‘†" && exit 1)

      - name: Detect file changes
        id: changed-files
        uses: tj-actions/changed-files@v41
        with:
          files_yaml: |
            eslint_config:
              - .eslintrc.js
              - yarn.lock
            eslint_target:
              - "**/*.{ts,js,vue}"

      - name: Lint all files
        if: ${{ github.event_name == 'push' || steps.changed-files.outputs.eslint_config_any_changed == 'true' }}
        run: yarn lint .

      - name: Lint changed files
        if: ${{ steps.lint-all.outcome == 'skipped' && steps.changed-files.outputs.eslint_target_any_changed == 'true' }}
        run: yarn lint ${{ steps.changed-files.outputs.eslint_target_all_changed_files }} --no-error-on-unmatched-pattern

      - name: Build observability package
        run: yarn build-pkg observability

      - name: Read release details
        id: release-details
        # prevents this step from running on forks AND only on pushes and .changeset.baseBranch is the target branch
        # TODO use StackVista instead of owanturist
        if: github.repository_owner == 'owanturist' && github.event_name == 'push'
        run: |
          BASE_BRANCH=$(jq -r '.baseBranch' .changeset/config.json)

          echo "Base branch: $BASE_BRANCH"

          if [[ "$BASE_BRANCH" == "${{ github.ref_name }}" ]]; then
            OUTPUT=$(mktemp ${{runner.temp}}/changeset-output.XXXXXX.json)

            if [ ! -f "$OUTPUT" ]; then
              echo "Failed to create temp file at: $OUTPUT"
              exit 1
            fi
            echo "Temporary file created at: $OUTPUT"

            ls -l "$OUTPUT"
            chmod +r "$OUTPUT" || exit 1
            ls -l "$OUTPUT"

            yarn changeset status --output "$OUTPUT"

            if [ ! -s "$OUTPUT" ]; then
              echo "Error: Temporary file is empty after running 'yarn changeset status'"
              exit 1
            fi

            MESSAGE=$(jq -r '.releases[0] as $pkg | if $pkg then "ðŸš€ Bumping `\($pkg.name)@\($pkg.oldVersion) â†’ \($pkg.newVersion)`" else "Publishing release..." end' "$OUTPUT")

            echo "message=$MESSAGE" >> $GITHUB_OUTPUT
          fi

      # creates a PR if there are changesets or creates a release if the PR is merged
      # creating a release triggers the `build-extension-charts` workflow
      - name: Create a Release Pull Request OR Publish a Release
        # run only if the release-details output is not empty
        if: steps.release-details.outputs.message
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: changesets/action@v1
        with:
          title: ${{ steps.release-details.outputs.message }}
          commit: ${{ steps.release-details.outputs.message }}
          # define the publish command, so changeset creates a release in GitHub
          # the build-extension-charts workflow will be triggered by the release event
          publish: echo "${{ steps.release-details.outputs.message }}"
